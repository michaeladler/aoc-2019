const std = @import("std");
const mem = std.mem;
const testing = std.testing;
const log = std.log;
const ArrayList = std.ArrayList;
const TailQueue = std.TailQueue;

const intcode = @import("intcode.zig");
const IntcodeProgram = intcode.IntcodeProgram;
const Instruction = intcode.Instruction;
const ParamMode = intcode.ParamMode;

const TestCase = struct {
    const Self = @This();

    code: []const i64,
    input: ?i64,
    expected_code: ?[]const i64,
    expected_output: []const i64,

    pub fn run(self: Self) !void {
        var program = try IntcodeProgram.init(testing.allocator, self.code);
        defer program.deinit();

        var input = ArrayList(i64).init(testing.allocator);
        defer input.deinit();
        if (self.input) |data| {
            try input.append(data);
        }

        var output = ArrayList(i64).init(testing.allocator);
        defer output.deinit();

        const status = try program.run(i64, input.items, i64, &output);

        try testing.expectEqual(IntcodeProgram.Status.terminated, status);
        if (self.expected_code) |expected| {
            try testing.expectEqualSlices(i64, expected[0..], program.code);
        }
        try testing.expectEqualSlices(i64, self.expected_output[0..], output.items);
    }
};

const empty = [_]i64{};

test "parseInstruction" {
    const instruction = Instruction.fromValue(1002);
    try testing.expectEqual(ParamMode.position, instruction.mul.first);
    try testing.expectEqual(ParamMode.immediate, instruction.mul.second);
}

test "run" {
    {
        const code = [_]i64{ 1, 0, 0, 0, 99 };
        const expected = [_]i64{ 2, 0, 0, 0, 99 };
        const tc = TestCase{
            .code = code[0..],
            .input = 42,
            .expected_code = expected[0..],
            .expected_output = empty[0..],
        };
        try tc.run();
    }
    {
        const code = [_]i64{ 2, 3, 0, 3, 99 };
        const expected = [_]i64{ 2, 3, 0, 6, 99 };
        const tc = TestCase{
            .code = code[0..],
            .input = 42,
            .expected_code = expected[0..],
            .expected_output = empty[0..],
        };
        try tc.run();
    }
    {
        const code = [_]i64{ 2, 4, 4, 5, 99, 0 };
        const expected = [_]i64{ 2, 4, 4, 5, 99, 9801 };
        const tc = TestCase{
            .code = code[0..],
            .input = 42,
            .expected_code = expected[0..],
            .expected_output = empty[0..],
        };
        try tc.run();
    }
    {
        const code = [_]i64{ 1, 1, 1, 4, 99, 5, 6, 0, 99 };
        const expected = [_]i64{ 30, 1, 1, 4, 2, 5, 6, 0, 99 };
        const tc = TestCase{
            .code = code[0..],
            .input = 42,
            .expected_code = expected[0..],
            .expected_output = empty[0..],
        };
        try tc.run();
    }
}

test "block and resume" {
    const code = [_]i64{
        3,    21,   1008, 21,  8,  20, 1005, 20,   22, 107, 8,   21,  20,   1006, 20, 31,   1106, 0, 36, 98, 0,
        0,    1002, 21,   125, 20, 4,  20,   1105, 1,  46,  104, 999, 1105, 1,    46, 1101, 1000, 1, 20, 4,  20,
        1105, 1,    46,   98,  99,
    };

    var program = try IntcodeProgram.init(testing.allocator, code[0..]);
    defer program.deinit();

    var output = ArrayList(i64).init(testing.allocator);
    defer output.deinit();

    var status = try program.run(i64, empty[0..], i64, &output);
    try testing.expectEqual(IntcodeProgram.Status.blocked, status);
    try testing.expectEqual(@as(usize, 0), output.items.len);

    var input = [_]i64{7};
    status = try program.run(i64, input[0..], i64, &output);

    try testing.expectEqual(IntcodeProgram.Status.terminated, status);
    try testing.expectEqual(@as(i64, 999), output.items[0]);
    try testing.expectEqual(@as(usize, 1), output.items.len);
}

test "extra memory" {
    const code = [_]i64{ 104, 1125899906842624, 99 };
    const expected = [_]i64{1125899906842624};
    const tc = TestCase{
        .code = code[0..],
        .input = null,
        .expected_code = null,
        .expected_output = expected[0..],
    };
    try tc.run();
}

test "quine" {
    const code = [_]i64{ 109, 1, 204, -1, 1001, 100, 1, 100, 1008, 100, 16, 101, 1006, 101, 0, 99 };
    const expected = [_]i64{ 109, 1, 204, -1, 1001, 100, 1, 100, 1008, 100, 16, 101, 1006, 101, 0, 99 };
    const tc = TestCase{
        .code = code[0..],
        .input = null,
        .expected_code = null,
        .expected_output = expected[0..],
    };
    try tc.run();
}

test "day 5" {
    const code_template = [_]i64{
        3,     225,  1,    225,   6,     6,    1100,  1,     238,  225,   104,  0,     1101, 91,    67,   225,   1102, 67,    36,    225,
        1102,  21,   90,   225,   2,     13,   48,    224,   101,  -819,  224,  224,   4,    224,   1002, 223,   8,    223,   101,   7,
        224,   224,  1,    223,   224,   223,  1101,  62,    9,    225,   1,    139,   22,   224,   101,  -166,  224,  224,   4,     224,
        1002,  223,  8,    223,   101,   3,    224,   224,   1,    223,   224,  223,   102,  41,    195,  224,   101,  -2870, 224,   224,
        4,     224,  1002, 223,   8,     223,  101,   1,     224,  224,   1,    224,   223,  223,   1101, 46,    60,   224,   101,   -106,
        224,   224,  4,    224,   1002,  223,  8,     223,   1001, 224,   2,    224,   1,    224,   223,  223,   1001, 191,   32,    224,
        101,   -87,  224,  224,   4,     224,  102,   8,     223,  223,   1001, 224,   1,    224,   1,    223,   224,  223,   1101,  76,
        90,    225,  1101, 15,    58,    225,  1102,  45,    42,   224,   101,  -1890, 224,  224,   4,    224,   1002, 223,   8,     223,
        1001,  224,  5,    224,   1,     224,  223,   223,   101,  62,    143,  224,   101,  -77,   224,  224,   4,    224,   1002,  223,
        8,     223,  1001, 224,   4,     224,  1,     224,   223,  223,   1101, 55,    54,   225,   1102, 70,    58,   225,   1002,  17,
        80,    224,  101,  -5360, 224,   224,  4,     224,   102,  8,     223,  223,   1001, 224,   3,    224,   1,    223,   224,   223,
        4,     223,  99,   0,     0,     0,    677,   0,     0,    0,     0,    0,     0,    0,     0,    0,     0,    0,     1105,  0,
        99999, 1105, 227,  247,   1105,  1,    99999, 1005,  227,  99999, 1005, 0,     256,  1105,  1,    99999, 1106, 227,   99999, 1106,
        0,     265,  1105, 1,     99999, 1006, 0,     99999, 1006, 227,   274,  1105,  1,    99999, 1105, 1,     280,  1105,  1,     99999,
        1,     225,  225,  225,   1101,  294,  0,     0,     105,  1,     0,    1105,  1,    99999, 1106, 0,     300,  1105,  1,     99999,
        1,     225,  225,  225,   1101,  314,  0,     0,     106,  0,     0,    1105,  1,    99999, 1008, 677,   677,  224,   102,   2,
        223,   223,  1005, 224,   329,   1001, 223,   1,     223,  1108,  677,  226,   224,  1002,  223,  2,     223,  1006,  224,   344,
        101,   1,    223,  223,   107,   677,  226,   224,   1002, 223,   2,    223,   1006, 224,   359,  101,   1,    223,   223,   108,
        677,   677,  224,  1002,  223,   2,    223,   1006,  224,  374,   1001, 223,   1,    223,   108,  226,   677,  224,   1002,  223,
        2,     223,  1006, 224,   389,   101,  1,     223,   223,  7,     226,  677,   224,  102,   2,    223,   223,  1006,  224,   404,
        1001,  223,  1,    223,   1108,  677,  677,   224,   1002, 223,   2,    223,   1005, 224,   419,  101,   1,    223,   223,   1008,
        226,   677,  224,  102,   2,     223,  223,   1006,  224,  434,   101,  1,     223,  223,   107,  226,   226,  224,   102,   2,
        223,   223,  1005, 224,   449,   1001, 223,   1,     223,  1007,  677,  677,   224,  1002,  223,  2,     223,  1006,  224,   464,
        1001,  223,  1,    223,   1007,  226,  226,   224,   1002, 223,   2,    223,   1005, 224,   479,  101,   1,    223,   223,   1008,
        226,   226,  224,  102,   2,     223,  223,   1006,  224,  494,   1001, 223,   1,    223,   8,    226,   226,  224,   102,   2,
        223,   223,  1006, 224,   509,   101,  1,     223,   223,  1107,  677,  677,   224,  102,   2,    223,   223,  1005,  224,   524,
        1001,  223,  1,    223,   1108,  226,  677,   224,   1002, 223,   2,    223,   1006, 224,   539,  101,   1,    223,   223,   1107,
        677,   226,  224,  1002,  223,   2,    223,   1006,  224,  554,   101,  1,     223,  223,   1007, 677,   226,  224,   1002,  223,
        2,     223,  1005, 224,   569,   101,  1,     223,   223,  7,     677,  226,   224,  1002,  223,  2,     223,  1006,  224,   584,
        101,   1,    223,  223,   107,   677,  677,   224,   1002, 223,   2,    223,   1005, 224,   599,  1001,  223,  1,     223,   8,
        226,   677,  224,  1002,  223,   2,    223,   1005,  224,  614,   101,  1,     223,  223,   7,    677,   677,  224,   1002,  223,
        2,     223,  1006, 224,   629,   1001, 223,   1,     223,  1107,  226,  677,   224,  1002,  223,  2,     223,  1006,  224,   644,
        101,   1,    223,  223,   108,   226,  226,   224,   102,  2,     223,  223,   1005, 224,   659,  1001,  223,  1,     223,   8,
        677,   226,  224,  1002,  223,   2,    223,   1005,  224,  674,   101,  1,     223,  223,   4,    223,   99,   226,
    };
    // It will then perform a series of diagnostic tests confirming that
    // various parts of the Intcode computer, like parameter modes, function
    // correctly. For each test, it will run an output instruction indicating
    // how far the result of the test was from the expected value, where 0
    // means the test was successful.
    {
        var code = try testing.allocator.alloc(i64, code_template.len);
        mem.copy(i64, code, code_template[0..]);
        defer testing.allocator.free(code);
        const expected = [_]i64{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 15508323 };
        const tc = TestCase{
            .code = code[0..],
            .input = 1,
            .expected_code = null,
            .expected_output = expected[0..],
        };
        try tc.run();
    }
    {
        var code = try testing.allocator.alloc(i64, code_template.len);
        mem.copy(i64, code, code_template[0..]);
        defer testing.allocator.free(code);
        const expected = [_]i64{9006327};
        const tc = TestCase{
            .code = code[0..],
            .input = 5,
            .expected_code = null,
            .expected_output = expected[0..],
        };
        try tc.run();
    }
}

test "BOOST" {
    var code = [_]i64{
        1102,  34463338, 34463338, 63,    1007,  63,    34463338, 63,   1005,  63,   53,   1101, 0,     3,     1000,
        109,   988,      209,      12,    9,     1000,  209,      6,    209,   3,    203,  0,    1008,  1000,  1,
        63,    1005,     63,       65,    1008,  1000,  2,        63,   1005,  63,   904,  1008, 1000,  0,     63,
        1005,  63,       58,       4,     25,    104,   0,        99,   4,     0,    104,  0,    99,    4,     17,
        104,   0,        99,       0,     0,     1101,  0,        36,   1015,  1102, 1,    387,  1028,  1101,  24,
        0,     1016,     1101,     0,     23,    1008,  1102,     1,    35,    1012, 1102, 1,    554,   1023,  1101,
        29,    0,        1003,     1101,  27,    0,     1011,     1101, 25,    0,    1000, 1101, 0,     38,    1018,
        1102,  20,       1,        1019,  1102,  28,    1,        1005, 1102,  1,    619,  1026, 1102,  1,     22,
        1004,  1101,     0,        0,     1020,  1101,  0,        31,   1009,  1102, 1,    783,  1024,  1102,  1,
        33,    1001,     1102,     616,   1,     1027,  1102,     1,    21,    1006, 1101, 32,   0,     1013,  1102,
        39,    1,        1014,     1102,  1,     378,   1029,     1101, 774,   0,    1025, 1102, 1,     1,     1021,
        1102,  30,       1,        1007,  1102,  37,    1,        1002, 1102,  1,    26,   1017, 1101,  0,     557,
        1022,  1102,     1,        34,    1010,  109,   13,       2101, 0,     -5,   63,   1008, 63,    23,    63,
        1005,  63,       203,      4,     187,   1105,  1,        207,  1001,  64,   1,    64,   1002,  64,    2,
        64,    109,      -14,      2107,  28,    4,     63,       1005, 63,    225,  4,    213,  1106,  0,     229,
        1001,  64,       1,        64,    1002,  64,    2,        64,   109,   10,   1207, -3,   20,    63,    1005,
        63,    245,      1106,     0,     251,   4,     235,      1001, 64,    1,    64,   1002, 64,    2,     64,
        109,   8,        1205,     3,     263,   1105,  1,        269,  4,     257,  1001, 64,   1,     64,    1002,
        64,    2,        64,       109,   -9,    1207,  -7,       34,   63,    1005, 63,   287,  4,     275,   1105,
        1,     291,      1001,     64,    1,     64,    1002,     64,   2,     64,   109,  -4,   2102,  1,     -3,
        63,    1008,     63,       32,    63,    1005,  63,       311,  1105,  1,    317,  4,    297,   1001,  64,
        1,     64,       1002,     64,    2,     64,    109,      21,   21101, 40,   0,    -6,   1008,  1019,  43,
        63,    1005,     63,       337,   1106,  0,     343,      4,    323,   1001, 64,   1,    64,    1002,  64,
        2,     64,       109,      -26,   1202,  7,     1,        63,   1008,  63,   21,   63,   1005,  63,    365,
        4,     349,      1106,     0,     369,   1001,  64,       1,    64,    1002, 64,   2,    64,    109,   26,
        2106,  0,        3,        4,     375,   1001,  64,       1,    64,    1105, 1,    387,  1002,  64,    2,
        64,    109,      -9,       21108, 41,    40,    3,        1005, 1019,  407,  1001, 64,   1,     64,    1106,
        0,     409,      4,        393,   1002,  64,    2,        64,   109,   13,   1205, -8,   423,   4,     415,
        1106,  0,        427,      1001,  64,    1,     64,       1002, 64,    2,    64,   109,  -19,   21107, 42,
        41,    5,        1005,     1015,  447,   1001,  64,       1,    64,    1106, 0,    449,  4,     433,   1002,
        64,    2,        64,       109,   -3,    2102,  1,        -5,   63,    1008, 63,   37,   63,    1005,  63,
        471,   4,        455,      1105,  1,     475,   1001,     64,   1,     64,   1002, 64,   2,     64,    109,
        -2,    1201,     0,        0,     63,    1008,  63,       28,   63,    1005, 63,   497,  4,     481,   1105,
        1,     501,      1001,     64,    1,     64,    1002,     64,   2,     64,   109,  8,    2107,  29,    -8,
        63,    1005,     63,       521,   1001,  64,    1,        64,   1106,  0,    523,  4,    507,   1002,  64,
        2,     64,       109,      -3,    1208,  -3,    30,       63,   1005,  63,   541,  4,    529,   1106,  0,
        545,   1001,     64,       1,     64,    1002,  64,       2,    64,    109,  4,    2105, 1,     9,     1105,
        1,     563,      4,        551,   1001,  64,    1,        64,   1002,  64,   2,    64,   109,   9,     1206,
        -3,    581,      4,        569,   1001,  64,    1,        64,   1106,  0,    581,  1002, 64,    2,     64,
        109,   -8,       1201,     -9,    0,     63,    1008,     63,   23,    63,   1005, 63,   605,   1001,  64,
        1,     64,       1106,     0,     607,   4,     587,      1002, 64,    2,    64,   109,  21,    2106,  0,
        -9,    1106,     0,        625,   4,     613,   1001,     64,   1,     64,   1002, 64,   2,     64,    109,
        -35,   2108,     31,       8,     63,    1005,  63,       647,  4,     631,  1001, 64,   1,     64,    1105,
        1,     647,      1002,     64,    2,     64,    109,      2,    1202,  0,    1,    63,   1008,  63,    30,
        63,    1005,     63,       667,   1105,  1,     673,      4,    653,   1001, 64,   1,    64,    1002,  64,
        2,     64,       109,      17,    21108, 43,    43,       -4,   1005,  1016, 691,  4,    679,   1106,  0,
        695,   1001,     64,       1,     64,    1002,  64,       2,    64,    109,  -14,  1208, -1,    30,    63,
        1005,  63,       711,      1106,  0,     717,   4,        701,  1001,  64,   1,    64,   1002,  64,    2,
        64,    109,      6,        21101, 44,    0,     -1,       1008, 1011,  44,   63,   1005, 63,    739,   4,
        723,   1105,     1,        743,   1001,  64,    1,        64,   1002,  64,   2,    64,   109,   -15,   2108,
        30,    8,        63,       1005,  63,    759,   1106,     0,    765,   4,    749,  1001, 64,    1,     64,
        1002,  64,       2,        64,    109,   27,    2105,     1,    0,     4,    771,  1001, 64,    1,     64,
        1105,  1,        783,      1002,  64,    2,     64,       109,  -9,    1206, 6,    795,  1105,  1,     801,
        4,     789,      1001,     64,    1,     64,    1002,     64,   2,     64,   109,  4,    21102, 45,    1,
        -7,    1008,     1012,     45,    63,    1005,  63,       823,  4,     807,  1105, 1,    827,   1001,  64,
        1,     64,       1002,     64,    2,     64,    109,      -14,  21102, 46,   1,    5,    1008,  1010,  43,
        63,    1005,     63,       851,   1001,  64,    1,        64,   1105,  1,    853,  4,    833,   1002,  64,
        2,     64,       109,      -1,    2101,  0,     1,        63,   1008,  63,   25,   63,   1005,  63,    873,
        1105,  1,        879,      4,     859,   1001,  64,       1,    64,    1002, 64,   2,    64,    109,   9,
        21107, 47,       48,       -3,    1005,  1010,  897,      4,    885,   1105, 1,    901,  1001,  64,    1,
        64,    4,        64,       99,    21101, 0,     27,       1,    21101, 915,  0,    0,    1106,  0,     922,
        21201, 1,        57526,    1,     204,   1,     99,       109,  3,     1207, -2,   3,    63,    1005,  63,
        964,   21201,    -2,       -1,    1,     21101, 942,      0,    0,     1106, 0,    922,  21201, 1,     0,
        -1,    21201,    -2,       -3,    1,     21101, 957,      0,    0,     1106, 0,    922,  22201, 1,     -1,
        -2,    1105,     1,        968,   21202, -2,    1,        -2,   109,   -3,   2106, 0,    0,
    };

    const expected = [_]i64{3380552333};

    const tc = TestCase{
        .code = code[0..],
        .input = 1,
        .expected_code = null,
        .expected_output = expected[0..],
    };
    try tc.run();
}
